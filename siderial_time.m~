%--------------------------------------------------------------------------
%
%  siderial_time.m
%
%  this function calculates the Greenwich Standard Time and Local Siderial
%  time given a julian date and longitude
% 
%  inputs:
%    JD       - Julian Date                                    deg
%    lon      - longitude     deg
%    rho      - 3x1 site vector in ECEF                                     km
%    ra       - 3x1 vector of right ascension observations                  deg
%    dec      - 3x1 vector of declanation observations                      deg
%    JD       - 3x1 vector of Julian Date observations  
%    TOF      - 
%
%  outputs:
%    r0       - 3x1 vector of intial postion of satellite in ECI            km
%    v0       - 3x1 vector of intial velocity of satellite in ECI           km/s
%    oe0      - 6x1 vector of intial classical orbital elements
%    rf       - 3x1 vector of final postion of satellite in ECI             km
%    vf       - 3x1 vector of final velocity of satellite in ECI            km/s
%    oef      - 6x1 vector of final classical orbital elements
%
% Last modified:   10/15/2019   T. Schuler
% 
% -------------------------------------------------------------------------


function [GST, LST] = siderial_time(JD,lon)

%From Algorithm 2 of Vallado, p.62 of first edition
%some additional inspiration from https://smallsats.org/2013/04/14/local-sidereal-time/

J2000 = 2451545.0;
T_uti = (JD-J2000)/36525;

gst0 = 100.4606184+36000.77005361*T_uti+.00038793*T_uti^2-2.6E-8*T_uti^3; %Local Greenwich time at 00:00:00
gst0 = mod(gst0,360);

dt = datetime(JD,'ConvertFrom','juliandate');

GST = gst0 + 360.98564724*(hour(dt) +minute(dt)/60 + second(dt)/3600)/24; %Local Greenwich time at a different UTI other than 00:00:00
GST = mod(GST,360);
LST = GST+lon; %Local Siderial Time
end